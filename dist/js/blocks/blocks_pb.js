// source: blocks/blocks.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var common_status_pb = require('../common/status_pb.js');
goog.object.extend(proto, common_status_pb);
goog.exportSymbol('proto.txpull.v1.blocks.Block', null, global);
goog.exportSymbol('proto.txpull.v1.blocks.BlockStatus', null, global);
goog.exportSymbol('proto.txpull.v1.blocks.FilterBlockRequest', null, global);
goog.exportSymbol('proto.txpull.v1.blocks.FilterBlockResponse', null, global);
goog.exportSymbol('proto.txpull.v1.blocks.GetBlockRequest', null, global);
goog.exportSymbol('proto.txpull.v1.blocks.GetBlockResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpull.v1.blocks.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.txpull.v1.blocks.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpull.v1.blocks.Block.displayName = 'proto.txpull.v1.blocks.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpull.v1.blocks.FilterBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.txpull.v1.blocks.FilterBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpull.v1.blocks.FilterBlockRequest.displayName = 'proto.txpull.v1.blocks.FilterBlockRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpull.v1.blocks.FilterBlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.txpull.v1.blocks.FilterBlockResponse.repeatedFields_, null);
};
goog.inherits(proto.txpull.v1.blocks.FilterBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpull.v1.blocks.FilterBlockResponse.displayName = 'proto.txpull.v1.blocks.FilterBlockResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpull.v1.blocks.GetBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.txpull.v1.blocks.GetBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpull.v1.blocks.GetBlockRequest.displayName = 'proto.txpull.v1.blocks.GetBlockRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpull.v1.blocks.GetBlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.txpull.v1.blocks.GetBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpull.v1.blocks.GetBlockResponse.displayName = 'proto.txpull.v1.blocks.GetBlockResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpull.v1.blocks.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.txpull.v1.blocks.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpull.v1.blocks.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.blocks.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    number: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    parentHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    uncleHash: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mixHash: jspb.Message.getFieldWithDefault(msg, 7, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 8, 0),
    logsBloom: msg.getLogsBloom_asB64(),
    stateRoot: jspb.Message.getFieldWithDefault(msg, 10, ""),
    transactionsRoot: jspb.Message.getFieldWithDefault(msg, 11, ""),
    receiptsRoot: jspb.Message.getFieldWithDefault(msg, 12, ""),
    coinbase: jspb.Message.getFieldWithDefault(msg, 13, ""),
    difficulty: jspb.Message.getFieldWithDefault(msg, 14, 0),
    size: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    extraData: msg.getExtraData_asB64(),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 18, 0),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 19, 0),
    baseFee: jspb.Message.getFieldWithDefault(msg, 20, 0),
    totalTransactionsCount: jspb.Message.getFieldWithDefault(msg, 21, 0),
    processedTransactionsCount: jspb.Message.getFieldWithDefault(msg, 22, 0),
    status: jspb.Message.getFieldWithDefault(msg, 23, 0),
    queuedTimestamp: (f = msg.getQueuedTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    processedTimestamp: (f = msg.getProcessedTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpull.v1.blocks.Block}
 */
proto.txpull.v1.blocks.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpull.v1.blocks.Block;
  return proto.txpull.v1.blocks.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpull.v1.blocks.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpull.v1.blocks.Block}
 */
proto.txpull.v1.blocks.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentHash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUncleHash(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMixHash(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogsBloom(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateRoot(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionsRoot(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiptsRoot(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoinbase(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDifficulty(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSize(value);
      break;
    case 16:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtraData(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBaseFee(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalTransactionsCount(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProcessedTransactionsCount(value);
      break;
    case 23:
      var value = /** @type {!proto.txpull.v1.blocks.BlockStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 24:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setQueuedTimestamp(value);
      break;
    case 25:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setProcessedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpull.v1.blocks.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpull.v1.blocks.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpull.v1.blocks.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.blocks.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getChainId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParentHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUncleHash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMixHash();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getLogsBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getStateRoot();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTransactionsRoot();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getReceiptsRoot();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCoinbase();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getDifficulty();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getSize();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getExtraData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      18,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      19,
      f
    );
  }
  f = message.getBaseFee();
  if (f !== 0) {
    writer.writeUint64(
      20,
      f
    );
  }
  f = message.getTotalTransactionsCount();
  if (f !== 0) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = message.getProcessedTransactionsCount();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      23,
      f
    );
  }
  f = message.getQueuedTimestamp();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getProcessedTimestamp();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.txpull.v1.blocks.Block.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 chain_id = 2;
 * @return {number}
 */
proto.txpull.v1.blocks.Block.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 number = 3;
 * @return {number}
 */
proto.txpull.v1.blocks.Block.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string hash = 4;
 * @return {string}
 */
proto.txpull.v1.blocks.Block.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string parent_hash = 5;
 * @return {string}
 */
proto.txpull.v1.blocks.Block.prototype.getParentHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setParentHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string uncle_hash = 6;
 * @return {string}
 */
proto.txpull.v1.blocks.Block.prototype.getUncleHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setUncleHash = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mix_hash = 7;
 * @return {string}
 */
proto.txpull.v1.blocks.Block.prototype.getMixHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setMixHash = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 nonce = 8;
 * @return {number}
 */
proto.txpull.v1.blocks.Block.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes logs_bloom = 9;
 * @return {!(string|Uint8Array)}
 */
proto.txpull.v1.blocks.Block.prototype.getLogsBloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes logs_bloom = 9;
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {string}
 */
proto.txpull.v1.blocks.Block.prototype.getLogsBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogsBloom()));
};


/**
 * optional bytes logs_bloom = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {!Uint8Array}
 */
proto.txpull.v1.blocks.Block.prototype.getLogsBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogsBloom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setLogsBloom = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional string state_root = 10;
 * @return {string}
 */
proto.txpull.v1.blocks.Block.prototype.getStateRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setStateRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string transactions_root = 11;
 * @return {string}
 */
proto.txpull.v1.blocks.Block.prototype.getTransactionsRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setTransactionsRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string receipts_root = 12;
 * @return {string}
 */
proto.txpull.v1.blocks.Block.prototype.getReceiptsRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setReceiptsRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string coinbase = 13;
 * @return {string}
 */
proto.txpull.v1.blocks.Block.prototype.getCoinbase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setCoinbase = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional uint64 difficulty = 14;
 * @return {number}
 */
proto.txpull.v1.blocks.Block.prototype.getDifficulty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional double size = 15;
 * @return {number}
 */
proto.txpull.v1.blocks.Block.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setSize = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 16;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.txpull.v1.blocks.Block.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 16));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
*/
proto.txpull.v1.blocks.Block.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.blocks.Block.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bytes extra_data = 17;
 * @return {!(string|Uint8Array)}
 */
proto.txpull.v1.blocks.Block.prototype.getExtraData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes extra_data = 17;
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {string}
 */
proto.txpull.v1.blocks.Block.prototype.getExtraData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtraData()));
};


/**
 * optional bytes extra_data = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {!Uint8Array}
 */
proto.txpull.v1.blocks.Block.prototype.getExtraData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtraData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setExtraData = function(value) {
  return jspb.Message.setProto3BytesField(this, 17, value);
};


/**
 * optional uint64 gas_limit = 18;
 * @return {number}
 */
proto.txpull.v1.blocks.Block.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint64 gas_used = 19;
 * @return {number}
 */
proto.txpull.v1.blocks.Block.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional uint64 base_fee = 20;
 * @return {number}
 */
proto.txpull.v1.blocks.Block.prototype.getBaseFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setBaseFee = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional uint32 total_transactions_count = 21;
 * @return {number}
 */
proto.txpull.v1.blocks.Block.prototype.getTotalTransactionsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setTotalTransactionsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional uint32 processed_transactions_count = 22;
 * @return {number}
 */
proto.txpull.v1.blocks.Block.prototype.getProcessedTransactionsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setProcessedTransactionsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional BlockStatus status = 23;
 * @return {!proto.txpull.v1.blocks.BlockStatus}
 */
proto.txpull.v1.blocks.Block.prototype.getStatus = function() {
  return /** @type {!proto.txpull.v1.blocks.BlockStatus} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {!proto.txpull.v1.blocks.BlockStatus} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 23, value);
};


/**
 * optional google.protobuf.Timestamp queued_timestamp = 24;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.txpull.v1.blocks.Block.prototype.getQueuedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 24));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
*/
proto.txpull.v1.blocks.Block.prototype.setQueuedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.clearQueuedTimestamp = function() {
  return this.setQueuedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.blocks.Block.prototype.hasQueuedTimestamp = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional google.protobuf.Timestamp processed_timestamp = 25;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.txpull.v1.blocks.Block.prototype.getProcessedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 25));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.txpull.v1.blocks.Block} returns this
*/
proto.txpull.v1.blocks.Block.prototype.setProcessedTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.blocks.Block} returns this
 */
proto.txpull.v1.blocks.Block.prototype.clearProcessedTimestamp = function() {
  return this.setProcessedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.blocks.Block.prototype.hasProcessedTimestamp = function() {
  return jspb.Message.getField(this, 25) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpull.v1.blocks.FilterBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.txpull.v1.blocks.FilterBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpull.v1.blocks.FilterBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.blocks.FilterBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && common_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpull.v1.blocks.FilterBlockRequest}
 */
proto.txpull.v1.blocks.FilterBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpull.v1.blocks.FilterBlockRequest;
  return proto.txpull.v1.blocks.FilterBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpull.v1.blocks.FilterBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpull.v1.blocks.FilterBlockRequest}
 */
proto.txpull.v1.blocks.FilterBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_status_pb.Status;
      reader.readMessage(value,common_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpull.v1.blocks.FilterBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpull.v1.blocks.FilterBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpull.v1.blocks.FilterBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.blocks.FilterBlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional txpull.v1.common.Status status = 1;
 * @return {?proto.txpull.v1.common.Status}
 */
proto.txpull.v1.blocks.FilterBlockRequest.prototype.getStatus = function() {
  return /** @type{?proto.txpull.v1.common.Status} */ (
    jspb.Message.getWrapperField(this, common_status_pb.Status, 1));
};


/**
 * @param {?proto.txpull.v1.common.Status|undefined} value
 * @return {!proto.txpull.v1.blocks.FilterBlockRequest} returns this
*/
proto.txpull.v1.blocks.FilterBlockRequest.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.blocks.FilterBlockRequest} returns this
 */
proto.txpull.v1.blocks.FilterBlockRequest.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.blocks.FilterBlockRequest.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.txpull.v1.blocks.FilterBlockResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpull.v1.blocks.FilterBlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.txpull.v1.blocks.FilterBlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpull.v1.blocks.FilterBlockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.blocks.FilterBlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && common_status_pb.Status.toObject(includeInstance, f),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.txpull.v1.blocks.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpull.v1.blocks.FilterBlockResponse}
 */
proto.txpull.v1.blocks.FilterBlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpull.v1.blocks.FilterBlockResponse;
  return proto.txpull.v1.blocks.FilterBlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpull.v1.blocks.FilterBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpull.v1.blocks.FilterBlockResponse}
 */
proto.txpull.v1.blocks.FilterBlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_status_pb.Status;
      reader.readMessage(value,common_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.txpull.v1.blocks.Block;
      reader.readMessage(value,proto.txpull.v1.blocks.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpull.v1.blocks.FilterBlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpull.v1.blocks.FilterBlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpull.v1.blocks.FilterBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.blocks.FilterBlockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.txpull.v1.blocks.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional txpull.v1.common.Status status = 1;
 * @return {?proto.txpull.v1.common.Status}
 */
proto.txpull.v1.blocks.FilterBlockResponse.prototype.getStatus = function() {
  return /** @type{?proto.txpull.v1.common.Status} */ (
    jspb.Message.getWrapperField(this, common_status_pb.Status, 1));
};


/**
 * @param {?proto.txpull.v1.common.Status|undefined} value
 * @return {!proto.txpull.v1.blocks.FilterBlockResponse} returns this
*/
proto.txpull.v1.blocks.FilterBlockResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.blocks.FilterBlockResponse} returns this
 */
proto.txpull.v1.blocks.FilterBlockResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.blocks.FilterBlockResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Block blocks = 2;
 * @return {!Array<!proto.txpull.v1.blocks.Block>}
 */
proto.txpull.v1.blocks.FilterBlockResponse.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.txpull.v1.blocks.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.txpull.v1.blocks.Block, 2));
};


/**
 * @param {!Array<!proto.txpull.v1.blocks.Block>} value
 * @return {!proto.txpull.v1.blocks.FilterBlockResponse} returns this
*/
proto.txpull.v1.blocks.FilterBlockResponse.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.txpull.v1.blocks.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.txpull.v1.blocks.Block}
 */
proto.txpull.v1.blocks.FilterBlockResponse.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.txpull.v1.blocks.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpull.v1.blocks.FilterBlockResponse} returns this
 */
proto.txpull.v1.blocks.FilterBlockResponse.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpull.v1.blocks.GetBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.txpull.v1.blocks.GetBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpull.v1.blocks.GetBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.blocks.GetBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpull.v1.blocks.GetBlockRequest}
 */
proto.txpull.v1.blocks.GetBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpull.v1.blocks.GetBlockRequest;
  return proto.txpull.v1.blocks.GetBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpull.v1.blocks.GetBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpull.v1.blocks.GetBlockRequest}
 */
proto.txpull.v1.blocks.GetBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpull.v1.blocks.GetBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpull.v1.blocks.GetBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpull.v1.blocks.GetBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.blocks.GetBlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 block_id = 1;
 * @return {number}
 */
proto.txpull.v1.blocks.GetBlockRequest.prototype.getBlockId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.GetBlockRequest} returns this
 */
proto.txpull.v1.blocks.GetBlockRequest.prototype.setBlockId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 id = 2;
 * @return {number}
 */
proto.txpull.v1.blocks.GetBlockRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.blocks.GetBlockRequest} returns this
 */
proto.txpull.v1.blocks.GetBlockRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpull.v1.blocks.GetBlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.txpull.v1.blocks.GetBlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpull.v1.blocks.GetBlockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.blocks.GetBlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && common_status_pb.Status.toObject(includeInstance, f),
    block: (f = msg.getBlock()) && proto.txpull.v1.blocks.Block.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpull.v1.blocks.GetBlockResponse}
 */
proto.txpull.v1.blocks.GetBlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpull.v1.blocks.GetBlockResponse;
  return proto.txpull.v1.blocks.GetBlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpull.v1.blocks.GetBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpull.v1.blocks.GetBlockResponse}
 */
proto.txpull.v1.blocks.GetBlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_status_pb.Status;
      reader.readMessage(value,common_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.txpull.v1.blocks.Block;
      reader.readMessage(value,proto.txpull.v1.blocks.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpull.v1.blocks.GetBlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpull.v1.blocks.GetBlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpull.v1.blocks.GetBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.blocks.GetBlockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.txpull.v1.blocks.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional txpull.v1.common.Status status = 1;
 * @return {?proto.txpull.v1.common.Status}
 */
proto.txpull.v1.blocks.GetBlockResponse.prototype.getStatus = function() {
  return /** @type{?proto.txpull.v1.common.Status} */ (
    jspb.Message.getWrapperField(this, common_status_pb.Status, 1));
};


/**
 * @param {?proto.txpull.v1.common.Status|undefined} value
 * @return {!proto.txpull.v1.blocks.GetBlockResponse} returns this
*/
proto.txpull.v1.blocks.GetBlockResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.blocks.GetBlockResponse} returns this
 */
proto.txpull.v1.blocks.GetBlockResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.blocks.GetBlockResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Block block = 2;
 * @return {?proto.txpull.v1.blocks.Block}
 */
proto.txpull.v1.blocks.GetBlockResponse.prototype.getBlock = function() {
  return /** @type{?proto.txpull.v1.blocks.Block} */ (
    jspb.Message.getWrapperField(this, proto.txpull.v1.blocks.Block, 2));
};


/**
 * @param {?proto.txpull.v1.blocks.Block|undefined} value
 * @return {!proto.txpull.v1.blocks.GetBlockResponse} returns this
*/
proto.txpull.v1.blocks.GetBlockResponse.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.blocks.GetBlockResponse} returns this
 */
proto.txpull.v1.blocks.GetBlockResponse.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.blocks.GetBlockResponse.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.txpull.v1.blocks.BlockStatus = {
  BS_NONE: 0,
  BS_QUEUED: 1,
  BS_PROCESSING: 2,
  BS_PROCESSED: 3,
  BS_FAILED: 4
};

goog.object.extend(exports, proto.txpull.v1.blocks);
