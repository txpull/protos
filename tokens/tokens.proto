syntax = "proto3";
option go_package = "../../dist/go/tokens;tokens";

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

package txpull.v1.tokens;

message TokenUrls {
    string website = 1;
    string technical_documentation = 2;
    string explorer = 3;
    string repository = 4;
    string telegram = 5;
    string discord = 6;
    string medium = 7;
    string twitter = 8;
}

message TokenSecurityInfo {
    bool ownership_renounced = 1;
}

// The Token protocol buffer message defines a standardized data format for representing 
// token objects. It includes fields such as the token identifier, blockchain identifier, 
// token name, description, symbol, decimal places, total supply, creation information, 
// owner information, and security information. The message can be used in a variety of contexts
// to provide a standardized way of representing token objects.
message Token {
    int64  id = 1;
    int64  chain_id = 2;
    string address = 3;
    string creator_address = 4;
    string owner_address = 5;
    string name = 6;
    string description = 7;
    string symbol = 8;
    int32  decimals = 9;
    int64  creation_block_number = 10;
    string creation_transaction_hash = 11;
    google.protobuf.Timestamp creation_timestamp = 12;
    string total_supply = 13;
    string total_supply_in_circulation = 14;
    TokenUrls urls = 15;
    TokenSecurityInfo security = 16;
}

// The `Status` type defines a logical error model that is suitable for
// different programming environments, including REST APIs and RPC APIs.
message Status {
    // A simple error code that can be easily handled by the client. The
    // actual error code is defined by `google.rpc.Code`.
    int32 code = 1;

    // A developer-facing human-readable error message in English. It should
    // both explain the error and offer an actionable resolution to it.
    string reason = 2;

    // A developer-facing human-readable error message in English. It should
    // both explain the error and offer an actionable resolution to it.
    string message = 3;

    // Additional error information that the client code can use to handle
    // the error, such as retry info or a help link.
    repeated google.protobuf.Any details = 4;
}

message FilterTokensRequest {
    uint64 start_block = 1;
    uint64 end_block = 2;
    uint64 page = 3;
    uint64 page_size = 4;
    uint32 status = 5;
}

message FilterTokensResponse {
    Status status = 1;
    repeated txpull.v1.tokens.Token token = 2;
}

message GetTokenRequest {
    uint64 token_id = 1;
    string address = 2;
}

message GetTokenResponse {
    txpull.v1.tokens.Token block = 1;
}

// The `TokenStatus` defines subscription method when streaming tokens to the clients. 
enum TokenStatus {
    ANY        = 0;
    QUEUED     = 1;
    PROCESSING = 2;
    PROCESSED  = 3;
    FAILED     = 4;
}

message SubscribeTokensRequest {
    uint64 start_block = 1;
    TokenStatus status = 2;
}

message QueueTokenRequest {
    string address = 1;
}

message QueueTokenResponse {
    Status status = 1;
    TokenStatus token_queue_status = 2;
}

message SubscriptionTokenResponse {
    Status status = 1;
    TokenStatus token_discovery_status = 2;
    txpull.v1.tokens.Token Token = 3;
}

service Tokens {
    rpc Filter(FilterTokensRequest) returns (FilterTokensResponse) {
        option (google.api.http) = {
            get: "/v1/tokens"
        };
    };

    rpc Get(GetTokenRequest) returns (GetTokenResponse) {
        option (google.api.http) = {
            get: "/v1/tokens/{address}"
        };
    };

    // Queue new token to the network. Response will only return acknowledgements, not actual
    // token.
    rpc Queue(QueueTokenRequest) returns (QueueTokenResponse) {
        option (google.api.http) = {
            get: "/v1/tokens/queue"
        };
    };

    // Queue new token to the network and wait for network response about the token 
    rpc QueueAndWait(stream QueueTokenRequest) returns (stream SubscriptionTokenResponse) {};

    rpc Subscribe(SubscribeTokensRequest) returns (stream SubscriptionTokenResponse) {};
}